{
  kotlin: {
    bool: {
      type: "kotlin.Boolean",
      serde: "com.amazon.kitchen.__internal__.BoolSerde",
    },
    int: {
      type: "java.math.BigInteger",
      serde: "com.amazon.kitchen.__internal__.IntSerde",
    },
    float: {
      type: "kotlin.Double",
      serde: "com.amazon.kitchen.__internal__.FloatSerde",
    },
    decimal: {
      type: "java.math.BigDecimal",
      serde: "com.amazon.kitchen.__internal__.DecimalSerde",
    },
    timestamp: {
      type: "com.amazon.ion.Timestamp",
      serde: "com.amazon.kitchen.__internal__.TimestampSerde",
    },
    string: {
      type: "kotlin.String",
      serde: "com.amazon.kitchen.__internal__.StringSerde",
    },
    symbol: {
      type: "kotlin.String",
      serde: "com.amazon.kitchen.__internal__.SymbolSerde",
    },
    blob: {
      type: "kotlin.ByteArray",
      serde: "com.amazon.kitchen.__internal__.BlobSerde",
    },
    clob: {
      type: "kotlin.ByteArray",
      serde: "com.amazon.kitchen.__internal__.ClobSerde",
    },
    list: {
      type: "kotlin.collections.List",
      serde: "com.amazon.kitchen.__internal__.ListSerde",
    },
    sexp: "kotlin.collections.List",
    struct: "kotlin.collections.Map",
    // TODO: drop support for number?
    number: {
      type: "kotlin.Number",
      serde: "com.amazon.kitchen.__internal__.NumberSerde",
    },
    // TODO: Pick either string or symbol
    text: "kotlin.String",
    lob: "kotlin.ByteArray",
    // TODO: drop support for these two?
    any: "kotlin.Any",
    nothing: "kotlin.Nothing",

    $null: "com.amazon.ion.IonNull",
    $bool: "com.amazon.ion.IonBool",
    $int: "com.amazon.ion.IonInt",
    $float: "com.amazon.ion.IonFloat",
    $decimal: "com.amazon.ion.IonDecimal",
    $timestamp: "com.amazon.ion.IonTimestamp",
    $string: "com.amazon.ion.IonString",
    $symbol: "com.amazon.ion.IonSymbol",
    $blob: "com.amazon.ion.IonBlob",
    $clob: "com.amazon.ion.IonClob",
    $list: "com.amazon.ion.IonList",
    $sexp: "com.amazon.ion.IonSexp",
    $struct: "com.amazon.ion.IonStruct",
    $number: "com.amazon.ion.IonNumber",
    $text: "com.amazon.ion.IonText",
    $lob: "com.amazon.ion.IonLob",
    $any: "com.amazon.ion.IonValue",
  }
}

'commons/commons.isl'::{
  kotlin: {
    uint8: "kotlin.UByte",
    int8: "kotlin.Byte",
    uint16: "kotlin.UShort",
    int16: "kotlin.Short",
    uint32: "kotlin.UInt",
    int32: "kotlin.Int",
    uint64: "kotlin.ULong",
    int64: "kotlin.Long",
    float32: "kotlin.Float",
    float64: "kotlin.Double",
  }
}


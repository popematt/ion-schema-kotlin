/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath("org.jlleitschuh.gradle:ktlint-gradle:10.0.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.20")
    }
}

plugins {
    id("org.jetbrains.kotlin.jvm") version "1.6.20" apply false
    id("org.jlleitschuh.gradle.ktlint") version "10.0.0" apply false
    id("jacoco")
    id("org.jetbrains.kotlinx.kover") version "0.7.0" apply false
}

allprojects {

    //apply(plugin: "org.jetbrains.kotlinx.kover")

    apply("org.jlleitschuh.gradle.ktlint")
    ktlint {
        outputToConsole = true
    }

    apply("jacoco")
    jacoco {
        toolVersion = "0.8.10"
        reportsDirectory = file("$buildDir/reports/jacoco/")
    }
}

subprojects {
    group = "com.amazon.ion"
    ext.kotlin_version = "1.6.20"

    apply("org.jetbrains.kotlin.jvm")
    tasks.withType(Test) {
        useJUnitPlatform()
        jacocoTestReport {
            reports {
                xml.required.set(true) // Required for codecov upload
                html.required.set(true) // Required for humans
                html.outputLocation.set(file("${buildDir}/reports/jacoco/html"))
            }
        }
    }

    tasks.jacocoTestReport {
        dependsOn(tasks.test) // tests are required to run before generating the report
        doLast {
            //logger.quiet "Coverage report written to file://${reports.html.destination.toPath()}/index.html"
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    val generatedVersionDir = "${buildDir}/generated-version"

    plugins.withId("org.jetbrains.kotlin.jvm", { _ ->
        sourceSets {
            main {
                output.dir(generatedVersionDir, "generateVersionAndHashProperties")
            }
        }
    })

    tasks {
        // generates a build properties file with the current library version and most recent commit hash
        val generateVersionAndHashProperties = create {
            doLast {
                val propertiesFile = file("$generatedVersionDir/${project.name}.properties")
                propertiesFile.parentFile.mkdirs()
                val properties = Properties()

                // get current subproject version
                properties.setProperty("version", version.toString())

                // get most recent short commit hash
                val commitHash = ByteArrayOutputStream()
                exec {
                    commandLine("git", "rev-parse", "--short", "HEAD")
                    standardOutput = commitHash
                }
                properties.setProperty("commit", commitHash.toString().trim())
                propertiesFile.withWriter { properties.store(it, null) }
            }
        }
        processResources.dependsOn(generateVersionAndHashProperties)
    }
}
